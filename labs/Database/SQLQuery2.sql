--INNER JOIN
use SAMPLEDB;
select * from TBLEMPLOYEE;
select * from DEPARTMENT;

SELECT E.ID,E.NAME,E.GENDER,D.DEPARTMENTNAME FROM 
TBLEMPLOYEE E INNER JOIN DEPARTMENT D ON E.DEPID=D.ID;

SELECT E.ID,E.NAME,E.GENDER,D.DEPARTMENTNAME FROM 
TBLEMPLOYEE E LEFT JOIN DEPARTMENT D ON E.DEPID=D.ID;

SELECT E.ID,E.NAME,E.GENDER,D.DEPARTMENTNAME FROM 
TBLEMPLOYEE E RIGHT JOIN DEPARTMENT D ON E.DEPID=D.ID;

SELECT E.ID,E.NAME,E.GENDER,D.DEPARTMENTNAME FROM 
TBLEMPLOYEE E FULL OUTER JOIN DEPARTMENT D ON E.DEPID=D.ID;

ALTER TABLE TBLEMPLOYEE ADD  MANAGERID INT;

SELECT E.NAME AS EMPLOYEENAME ,M.NAME AS MANAGERNAME
FROM TBLEMPLOYEE E LEFT JOIN TBLEMPLOYEE M ON E.MANAGERID=M.ID;

CREATE TABLE SALES (SALEDID INT IDENTITY(1,1) PRIMARY KEY,PRODUCT VARCHAR(200),QUANTITY INT,PRICE INT,SALEDATE DATETIME);

SELECT GETDATE()
INSERT INTO SALES VALUES('LAPTOP',2,1200,GETDATE());
INSERT INTO SALES VALUES('LAPTOP',1,1200,GETDATE());
INSERT INTO SALES VALUES('PHONE',5,600,GETDATE());
INSERT INTO SALES VALUES('PHONE',3,600,GETDATE());
INSERT INTO SALES VALUES('TABLET',4,800,GETDATE());

SELECT * FROM SALES;

SELECT PRODUCT,SUM(QUANTITY) AS TOTALQUANTITY FROM 
SALES GROUP BY PRODUCT HAVING SUM(QUANTITY)>3;

SELECT PRODUCT,MAX(QUANTITY) AS TOTALQUANTITY FROM 
SALES GROUP BY PRODUCT

SELECT PRODUCT,MIN(QUANTITY) AS TOTALQUANTITY FROM 
SALES GROUP BY PRODUCT

SELECT PRODUCT,AVG(QUANTITY) AS TOTALQUANTITY FROM 
SALES GROUP BY PRODUCT

SELECT COUNT(*) FROM SALES
/*
	-TABLES
	-FUNCTIONS
	-PROCEDURES
	-VIEWS
	-TRIGGERS
	-EXCEPCTION HANDLING
*/

CREATE FUNCTION CALCULATETOTALPRICE(@PRICE DECIMAL(10,2),@TEXRATE DECIMAL(5,2))
RETURNS DECIMAL(10,2)
AS 
BEGIN
DECLARE @TOTALPRICE DECIMAL(10,2);
SET @TOTALPRICE=@PRICE+(@PRICE*@TEXRATE/100);
RETURN @TOTALPRICE;

END;

SELECT DBO.CALCULATETOTALPRICE(100,5) AS TOTALPRICE;

CREATE FUNCTION GETHIGHTPAIDEMPLOYEES(@MINSALARY DECIMAL(10,2))
RETURNS TABLE
AS
RETURN (SELECT ID,NAME,SALARY FROM TBLEMPLOYEE WHERE SALARY> @MINSALARY);

SELECT * FROM DBO.GETHIGHTPAIDEMPLOYEES(10000);

SELECT * FROM TBLEMPLOYEE;

alter PROCEDURE INSERTEMPLOYEE(@NAME NVARCHAR(50),@GENDER VARCHAR(1),
@DEPID INT,
@MANAGERID INT,@SALARY DECIMAL(10,2))
AS
BEGIN
BEGIN TRY
--START TRANSACTION;
	BEGIN TRANSACTION;
		INSERT INTO TBLEMPLOYEE(ID,NAME,GENDER,DEPID,MANAGERID,SALARY)  VALUES(1,@NAME,@GENDER,@DEPID,@MANAGERID,@SALARY);
		COMMIT TRANSACTION
		SELECT SCOPE_IDENTITY() AS NEWEMPLOYEEID;
	END TRY
	BEGIN CATCH
	-- ROLLBACK TRANACTION IF ANY ERROR OCCURS
	IF @@TRANCOUNT>0
		ROLLBACK TRANSACTION;
	DECLARE @ERROR_SEVERITY INT,@ERROR_STATE INT,@ERROR_NUMBER INT,@ERROR_MESSAGE NVARCHAR(4000);
	SET @ERROR_SEVERITY=ERROR_SEVERITY();
	SET @ERROR_STATE=ERROR_STATE();
	SET @ERROR_NUMBER=ERROR_NUMBER();
	SET @ERROR_MESSAGE=ERROR_MESSAGE();

	RAISERROR('ERROR %d: %s',@ERROR_SEVERITY,@ERROR_STATE,@ERROR_NUMBER,@ERROR_MESSAGE);
	END CATCH;
END;

EXEC INSERTEMPLOYEE 'SUDIP','M',7,1,8000;

SELECT * FROM TBLEMPLOYEE;

ALTER TABLE TBLEMPLOYEE ADD EMPID NVARCHAR(10);
ALTER PROCEDURE INSERTEMPLOYEEWITHID(@NAME NVARCHAR(50),@GENDER VARCHAR(1),
@DEPID INT,
@MANAGERID INT,@SALARY DECIMAL(10,2))
AS
BEGIN
DECLARE @NEWEMPLOYEEID INT;
INSERT INTO TBLEMPLOYEE(NAME,GENDER,DEPID,MANAGERID,SALARY) 
VALUES(@NAME,@GENDER,@DEPID,@MANAGERID,@SALARY);
SELECT  @NEWEMPLOYEEID=SCOPE_IDENTITY();
UPDATE TBLEMPLOYEE SET EMPID='EMP'+CAST(@NEWEMPLOYEEID AS NVARCHAR) WHERE ID=@NEWEMPLOYEEID;
END;

EXEC INSERTEMPLOYEEWITHID 'ANKIT','M',7,1,8000;
SELECT * FROM TBLEMPLOYEE;

INSERT INTO TBLEMPLOYEE(NAME,GENDER,DEPID,MANAGERID,SALARY) 
VALUES('RAM','M',9,2,1000);

CREATE VIEW EMPDEPTDATA  
AS
SELECT E.ID,E.NAME,E.GENDER,D.DEPARTMENTNAME FROM 
TBLEMPLOYEE E INNER JOIN DEPARTMENT D ON E.DEPID=D.ID;

SELECT * FROM EMPDEPTDATA;

CREATE TABLE AUDITLOG(EMPLOYEEID INT,ACTION VARCHAR(2000),ACTIONDATE DATETIME);

CREATE TRIGGER TRGAFTERINSERT ON TBLEMPLOYEE 
AFTER INSERT
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO AUDITLOG SELECT ID,'INSERTED',GETDATE() FROM inserted;

END;

SELECT * FROM AUDITLOG;
SELECT * FROM TBLEMPLOYEE ORDER BY ID DESC;

CREATE TRIGGER TRGINSTEEADOFDELETE ON TBLEMPLOYEE 
INSTEAD OF DELETE
AS
BEGIN
SET NOCOUNT ON;

INSERT INTO AUDITLOG SELECT ID,'deleted',GETDATE() FROM deleted;

END;

DELETE  FROM TBLEMPLOYEE WHERE ID=5;
SELECT * FROM TBLEMPLOYEE;
SELECT * FROM AUDITLOG;


CREATE TABLE CUSTOMERS(CUSTOMERID INT PRIMARY KEY,NAME NVARCHAR(200));
CREATE TABLE ORDERS (ORDERID INT PRIMARY KEY,CUSTOMERID INT FOREIGN KEY(CUSTOMERID) REFERENCES CUSTOMERS(CUSTOMERID) );

INSERT INTO CUSTOMERS VALUES(1,'VIKASH');

INSERT INTO ORDERS VALUES(1,3);